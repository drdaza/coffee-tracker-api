version: '3.8'

services:
  # === BASE DE DATOS ===
  postgres:
    image: postgres:16.2
    container_name: coffee-tracker-db-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-coffee_tracker}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - coffee-tracker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === API ===
  api:
    build:
      context: .
      target: prod
      dockerfile: Dockerfile
    image: coffee-tracker-api:node22-latest
    container_name: coffee-tracker-api-prod
    restart: always
    ports:
      - "${PORT:-3000}:3000"
    environment:
      NODE_ENV: production
      PORT: ${PORT:-3000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-coffee_tracker}?schema=public
      APP_VERSION: ${APP_VERSION:-1.0.0}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - coffee-tracker-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: sh -c "npx prisma generate && npx prisma migrate deploy && pnpm run start:prod"

networks:
  coffee-tracker-network:
    driver: bridge

volumes:
  postgres_data_prod:
    external: false 